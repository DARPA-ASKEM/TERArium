# Automatically build Docker images on changes to main and push them to the GitHub
# Container Registry using HCL Bake file.
#
# NOTE: Ideally this workflow would be triggered only on pushes to the tag and not
# to main. However due to a current limitation, the caching does not work properly
# when trigged on a tag (https://github.com/docker/build-push-action/issues/433). So
# until such time as that is fixed this workflow will build a new image every time
# something is pushed to main. A separate workflow is then triggered on tag pushes
# to automatically re-tag the built image and deploy.

name: Build and Publish

on:
  workflow_run:
    workflows: ['Playwright Tests', 'Lint & Test']
    branches:
      ['main', 'release/**', '203-bug-fix-building-the-terarium-applications']
    types:
      - completed
  push:
    branches: ['203-bug-fix-building-the-terarium-applications']
    tags: ['*']
  # # TODO: temporary for testing
  # pull_request:
  #   branches: ['main']

env:
  REGISTRY: ghcr.io
  OWNER: ${{ github.repository_owner }}
  BAKE_FILE: docker-bake.hcl
  BAKE_GROUP: prod

jobs:
  # Generate a matrix based on all the targets defined in the
  # bake file.
  targets:
    name: Generate targets list from provided bake file
    if: github.ref_name == 'main' || contains(github.event.ref, '/tags/')
    runs-on: ubuntu-22.04
    outputs:
      matrix: ${{ steps.targets.outputs.matrix }}
    steps:
      - name: debug
        run: |
          echo "HEAD_BRANCH: ${{ github.event.workflow_run.head_branch }}"
          echo "REF: ${{ github.ref_name }}"
          if [[ '${{ github.ref_type' == 'branch' ]]; then
            TAG=latest
          else
            TAG=${{ github.ref_name}}
          echo $TAG

      # 1.0 - only run if the dependant workflows were successful
      - name: Workflow Run Wait
        uses: ahmadnassri/action-workflow-run-wait@2aa3d9e1a12ecaaa9908e368eaf2123bb084323e

      # 1.1 - checkout the files
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.workflow_run.head_branch }}

      # 1.2 - Generate a matrix output of all the targets for the specified group
      - name: Create matrix
        id: targets
        run: |
          echo "matrix=$(docker buildx bake ${{ env.BAKE_GROUP }} -f ${{ env.BAKE_FILE }} --print | jq -cr '.group.default.targets')" >> $GITHUB_OUTPUT

      # 1.3 (optional) - output the generated target list for verification
      - name: Show matrix
        run: |
          echo ${{ steps.targets.outputs.matrix }}

  build-push:
    # NOTE: this name is used for waiting on in the retag workflow
    name: build-bake-push
    runs-on: ubuntu-22.04
    if: github.ref_name == 'main' || contains(github.event.ref, '/tags/')
    permissions:
      packages: write
      contents: read
    # this job depends on the 'targets' job
    needs:
      - targets

    # 2.0 - Build a matrix strategy from the retrieved target list
    strategy:
      fail-fast: true
      matrix:
        target: ${{ fromJson(needs.targets.outputs.matrix) }}

    steps:
      # 2.0 - only run if the dependant workflows were successful
      - name: Workflow Run Wait
        uses: ahmadnassri/action-workflow-run-wait@2aa3d9e1a12ecaaa9908e368eaf2123bb084323e

      # 2.1 - Checkout the repository
      - name: Checkout the repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.workflow_run.head_branch }}

      # 2.2 - Install the appropriate tool based on target
      - name: Setup Node v18.8.0
        if: matrix.target == 'hmi-client'
        uses: actions/setup-node@v3
        with:
          node-version: 18.8.0
          cache: 'yarn'

      - name: Validate GradleW JAR
        if: matrix.target != 'hmi-client'
        uses: gradle/wrapper-validation-action@55e685c48d84285a5b0418cd094606e199cca3b6

      - name: Setup Java v17
        if: matrix.target != 'hmi-client'
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17
          cache: gradle

      # 2.3 - Build all packages and move them to required location for Docker
      - name: Build
        run: |
          make image-${{ matrix.target }}

      # 2.4 - Set environment variables to be used within the bake file
      # NOTE: this overrides the defaults and should be specific to this deployment
      - name: set env variables for bakefile
        run: |
          if [[ '${{ github.ref_type' == 'branch' ]]; then
            TAG=latest
          else
            TAG=${{ github.ref_name }}
          echo "VERSION=${TAG,,}" >> ${GITHUB_ENV}
          echo "DOCKER_REGISTRY=${{ env.REGISTRY }}" >> ${GITHUB_ENV}
          # Lowercase the owner for docker image naming conventions
          echo "DOCKER_ORG=${OWNER,,}" >> ${GITHUB_ENV}
          java --version

      # 2.5 - Login against the docker registry
      - name: Login to registry ${{ env.REGISTRY }}
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 2.6 - Setup QEMU for platform emulation
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      # 2.7 - Setup Docker BuildX for multi platform building
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 2.8 - Build and push Docker Images
      - name: Build Images using BuildX Bake
        uses: docker/bake-action@v2
        with:
          files: ./${{ env.BAKE_FILE }}
          targets: ${{ matrix.target }}
          push: false
          set: |
            *.cache-from=type=gha,scope=build-${{ matrix.target }}
            *.cache-to=type=gha,scope=build-${{ matrix.target }},mode=max
